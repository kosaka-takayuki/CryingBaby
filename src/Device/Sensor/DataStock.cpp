#include "Device/Sensor/DataStock.h"

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// コンストラクタ
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		DataStock::DataStock(){
		}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Initialize
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void DataStock::Initialize(int _avg_max , int _min, int _max,  float _TPM_min, float _TPM_max){

			this->AVG_MAX = _avg_max;				//最大数を計測
			this->Datas = new float[ _avg_max ];	//配列生成
			this->Count =0;
			this->Data = 0.0f;

			this->Threshold_min = _min;	//最小値
			this->Threshold_max = _max;	//最大値

			this->ActiveTime = millis();

			


			//配列初期化
			for(int i=0; i< this->AVG_MAX;i++){				this->Datas[i] = 0;			}

		
			Tapping.Initialize(_TPM_min, _TPM_max);

		}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// AddData データ追加
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void DataStock::AddData(float val){
			this->Datas[ this->Count ]  =val;
			this->Count++;
			if(this->Count >= this->AVG_MAX){	this->Count = 0;	}
		}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Average 平均処理
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void DataStock::Average(){

			this->Sum =0.0f;

			//合計処理
			for(int i=0;i< this->AVG_MAX;i++){
				this->Sum +=  (float)this->Datas[i];
			}
			//平均処理
			this->Data = (float)this->Sum / (float)this->AVG_MAX;
		}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// GetTempture 温度
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		float DataStock::GetTempture(){

			float CorrectionVal =  16.7684375f; //補正温度

			//サーミスタから温度の計算を行う
			double Vout =  this->Data * 3.3f / 4096.0; //出力電圧(Vout)を測定
			double R1 = (3.3f * 4.7f) / Vout - 4.7f; //サーミスタ抵抗値(R1)を計算
			double B = 3452.9f * pow(R1,-0.012329f); //補正係数(B)を計算
			double T = B / log(R1*exp(B/(25+273.15f))/10)-273.15f; //サーミスタ温度(T)を計算

			if( (T + CorrectionVal)  <= 0){
				this->Tempture = 0.0f;	//0度を下回ったら　0度に設定
			}else{
				this->Tempture = T + CorrectionVal;
			}

			return  this->Tempture;

		}
